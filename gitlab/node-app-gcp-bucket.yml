stages:
  - build
  - prepare
  - deploy


build app:
  image: node:12
  stage: build
  artifacts:
    paths:
      - public
  script:
    - npm install
    - npm run build
    # UNCOMMENT THE FOLLOWING LINE AND UPDATE IF BUILD DIR IS NOT /PUBLIC
    #- mv dist public


deploy_review:
  except:
    - master
  dependencies: 
    - build app
  stage: deploy
  image: docker:latest
  environment:
    name: staging
  script:
    # Install CA certs, openssl to https downloads, python for gcloud sdk
    - apk add --update make ca-certificates openssl python3
    - update-ca-certificates

    # Download and install Google Cloud SDK
    - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
    - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --usage-reporting=false --path-update=true
    - PATH="google-cloud-sdk/bin:${PATH}"
    - BUCKET_NAME=${$CI_COMMIT_REF_NAME///_}
    - gcloud --quiet components update

    - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gsutil mb -p $GCP_PROJECT_ID -c standard -l us-east1 -b on gs://$BUCKET_NAME
    - gsutil iam ch allUsers:objectViewer gs://$BUCKET_NAME
    - gsutil -m cp -R public/* gs://$BUCKET_NAME
    - gsutil web set -m index.html -e 404.html gs://$BUCKET_NAME

prepare_staging:
  only:
    - master
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  stage: prepare
  environment:
    name: staging
  script:
    # Install CA certs, openssl to https downloads, python for gcloud sdk
    - apk add --update make ca-certificates openssl python3
    - update-ca-certificates

    # Download and install Google Cloud SDK
    - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
    - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --usage-reporting=false --path-update=true
    - PATH="google-cloud-sdk/bin:${PATH}"
    - gcloud --quiet components update

    - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - export TF_VAR_GCP_SERVICE_KEY="${HOME}/gcloud-service-key.json"
    - export TF_VAR_GCP_BUCKET=$GCP_BUCKET
    - export TF_VAR_GCP_PROJECT_NAME=$GCP_PROJECT_ID
    - cd terraform
    - gitlab-terraform init
    - gitlab-terraform plan
    - gitlab-terraform apply


prepare_prod:
  only:
    - master
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  stage: prepare
  environment:
    name: prod
  script:
    # Install CA certs, openssl to https downloads, python for gcloud sdk
    - apk add --update make ca-certificates openssl python3
    - update-ca-certificates

    # Download and install Google Cloud SDK
    - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
    - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --usage-reporting=false --path-update=true
    - PATH="google-cloud-sdk/bin:${PATH}"
    - gcloud --quiet components update

    - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - export TF_VAR_GCP_SERVICE_KEY="${HOME}/gcloud-service-key.json"
    - export TF_VAR_GCP_BUCKET=$GCP_BUCKET
    - export TF_VAR_GCP_PROJECT_NAME=$GCP_PROJECT_ID
    - export TF_VAR_APP_DOMAIN=$APP_DOMAIN
    - export TF_VAR_DNS_ZONE_NAME=$DNS_ZONE_NAME
    - cd terraform
    - gitlab-terraform init
    - gitlab-terraform plan
    - gitlab-terraform apply

deploy_staging:
  only:
    - master
  dependencies: 
    - build app
  stage: deploy
  image: docker:latest
  environment:
    name: staging
    url: https://$APP_DOMAIN
  script:
    # Install CA certs, openssl to https downloads, python for gcloud sdk
    - apk add --update make ca-certificates openssl python3
    - update-ca-certificates

    # Download and install Google Cloud SDK
    - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
    - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --usage-reporting=false --path-update=true
    - PATH="google-cloud-sdk/bin:${PATH}"
    - gcloud --quiet components update

    - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gsutil -m cp -R public/* gs://$GCP_BUCKET
    - gsutil web set -m index.html -e 404.html gs://$GCP_BUCKET


deploy_prod:
  only:
    - master
  dependencies: 
    - build app
  stage: deploy
  image: docker:latest
  when: manual
  environment:
    name: prod
    url: https://$APP_URL
  script:
    # Install CA certs, openssl to https downloads, python for gcloud sdk
    - apk add --update make ca-certificates openssl python3
    - update-ca-certificates

    # Download and install Google Cloud SDK
    - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
    - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --usage-reporting=false --path-update=true
    - PATH="google-cloud-sdk/bin:${PATH}"
    - gcloud --quiet components update

    - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gsutil -m cp -R public/* gs://$GCP_BUCKET
    - gsutil web set -m index.html -e 404.html gs://$GCP_BUCKET